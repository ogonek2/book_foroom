<?php

namespace App\Console\Commands;

use App\Models\Permission;
use App\Models\Role;
use App\Models\User;
use Illuminate\Console\Command;

class CheckDatabase extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'admin:check-database';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Check database for roles, permissions and users';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        $this->line("\nüìã –†–æ–ª–∏:");
        $roles = Role::all();
        if ($roles->count() > 0) {
            foreach ($roles as $role) {
                $this->line("- ID: {$role->id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {$role->name}, Slug: {$role->slug}, –ê–∫—Ç–∏–≤–Ω–∞: " . ($role->is_active ? '–î–∞' : '–ù–µ—Ç'));
            }
        } else {
            $this->error('‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        $this->line("\nüîë –†–∞–∑—Ä–µ—à–µ–Ω–∏—è:");
        $permissions = Permission::all();
        if ($permissions->count() > 0) {
            $this->line("–í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {$permissions->count()}");
            foreach ($permissions->groupBy('group') as $group => $groupPermissions) {
                $this->line("  –ì—Ä—É–ø–ø–∞ '{$group}': {$groupPermissions->count()} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π");
            }
        } else {
            $this->error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $this->line("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:");
        $users = User::with('roles')->get();
        if ($users->count() > 0) {
            foreach ($users as $user) {
                $rolesList = $user->roles->count() > 0 
                    ? $user->roles->pluck('name')->join(', ') 
                    : '–ù–µ—Ç —Ä–æ–ª–µ–π';
                $this->line("- ID: {$user->id}, –ò–º—è: {$user->name}, Email: {$user->email}, –†–æ–ª–∏: {$rolesList}");
            }
        } else {
            $this->error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ user_roles
        $this->line("\nüîó –°–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–æ–ª—å:");
        $userRoles = \DB::table('user_roles')->get();
        if ($userRoles->count() > 0) {
            foreach ($userRoles as $userRole) {
                $user = User::find($userRole->user_id);
                $role = Role::find($userRole->role_id);
                $this->line("- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->name} ‚Üí –†–æ–ª—å: {$role->name}");
            }
        } else {
            $this->error('‚ùå –°–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ role_permissions
        $this->line("\nüîó –°–≤—è–∑–∏ —Ä–æ–ª—å-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:");
        $rolePermissions = \DB::table('role_permissions')->get();
        if ($rolePermissions->count() > 0) {
            $rolePermCounts = $rolePermissions->groupBy('role_id')->map->count();
            foreach ($rolePermCounts as $roleId => $count) {
                $role = Role::find($roleId);
                $this->line("- –†–æ–ª—å: {$role->name} ‚Üí {$count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π");
            }
        } else {
            $this->error('‚ùå –°–≤—è–∑–∏ —Ä–æ–ª—å-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        }

        return 0;
    }
}
